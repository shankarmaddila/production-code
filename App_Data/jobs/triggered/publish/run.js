// Generated by CoffeeScript 1.10.0
(function() {
  (function() {
    var Firebase, _, _s, addImageData, azure, cmd, csv, directory, extractColors, extractCustoms, fileService, fileShare, fileShareKey, getLatestCSV, imageList, imagesSaved, jsonFile, missed, missedPartNumbers, options, parseCSV, parseString, partNumbers, request, revision, saveJSON, share, toPercent, total, zeroFill;
    azure = require('azure-storage');
    csv = require('csv');
    jsonFile = require('jsonfile');
    _ = require('underscore');
    _s = require('underscore.string');
    request = require('request');
    cmd = require('node-cmd');
    Firebase = require('firebase');
    parseString = require('xml2js').parseString;
    missed = 0;
    total = 0;
    imagesSaved = 0;
    options = {};
    imageList = [];
    partNumbers = [];
    missedPartNumbers = [];
    share = 'datafiles';
    directory = 'qa';
    fileShare = "interfacecampaigns";
    fileShareKey = 'cfiEpxphPrJzIsI8bL5a5hCSF5Rn1zFVWPcm3Z323IFA+dbmpr9xgSHm1hXHz24x4d+4Z5tU/Ri+70VL7Lh09g==';
    revision = Date.now();
    toPercent = function(num, total) {
      return num / total * 100;
    };
    zeroFill = function(number, width) {
      if (!number) {
        return '00';
      }
      width -= number.toString().length;
      if (width > 0) {
        return new Array(width + (/\./.test(number) ? 2 : 1)).join('0') + number;
      }
      return number + '';
    };
    getLatestCSV = (function(_this) {
      return function(error, result, response) {
        var fileNames, newestFileName;
        fileNames = _.pluck(result.entries.files, 'name');
        newestFileName = fileNames.pop();
        console.log("newestFileName: " + newestFileName);
        console.log("newestFileName: " + yes);
        return fileService.getFileToText(share, directory, newestFileName, options, parseCSV);
      };
    })(this);
    parseCSV = (function(_this) {
      return function(err, result) {
        result = result.replace(/\#/g, '');
        return csv.parse(result, {
          columns: true,
          trim: true,
          skip_lines_with_empty_values: true,
          skip_empty_lines: true
        }, extractCustoms);
      };
    })(this);
    extractCustoms = (function(_this) {
      return function(err, dataresult) {
        console.log("extract customs");
        if (err) {
          console.log(err);
        }
        total = dataresult.length;
        return _.each(dataresult, function(row, index) {
          var addImageDataWithRow, scene7request, scene7search, search, sizeCode;
          if ((row.COLOR.indexOf("CUSTOM") > -1) || (row.RADSTOCK === "R")) {
            search = row.E1ITEM.trim();
            sizeCode = row.E1ITEM.substring(12, 14);
            if (sizeCode === "7A") {
              sizeCode = "7S";
            }
            if (sizeCode === "5B") {
              sizeCode = "5S";
            }
            scene7search = search.slice(0, -7);
            scene7request = '<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><SOAP-ENV:Header><authHeader xmlns="http://www.scene7.com/IpsApi/xsd/2016-01-14-beta"><user>scott+api@peopledesign.com</user><password>enW1L6JjxL$</password><locale>en-US</locale><appName>Adobe.Scene7.SPS</appName><appVersion>6.10-194940</appVersion><faultHttpStatusCode>200</faultHttpStatusCode></authHeader></SOAP-ENV:Header><SOAP-ENV:Body><searchAssetsByMetadataParam xmlns="http://www.scene7.com/IpsApi/xsd/2016-01-14-beta"><companyHandle>c|28267</companyHandle><filters><includeSubfolders>true</includeSubfolders><assetTypeArray><items>Image</items></assetTypeArray><excludeByproducts>false</excludeByproducts><trashState>NotInTrash</trashState></filters><metadataConditionArray>';
            scene7request += '<items><fieldHandle>name</fieldHandle><op>StartsWith</op><value>' + scene7search + '</value></items>';
            scene7request += '<items><fieldHandle>name</fieldHandle><op>Contains</op><value>' + sizeCode + '</value></items>';
            scene7request += '<items><fieldHandle>name</fieldHandle><op>EndsWith</op><value>_va1</value></items></metadataConditionArray><metadataConditionMatchMode>MatchAll</metadataConditionMatchMode><recordsPerPage>1</recordsPerPage><resultsPage>1</resultsPage><sortBy>created_at</sortBy><sortDirection>Ascending</sortDirection></searchAssetsByMetadataParam></SOAP-ENV:Body></SOAP-ENV:Envelope>';
            addImageDataWithRow = _.partial(addImageData, search, row);
            return request.post({
              url: 'https://s7sps1apissl.scene7.com/scene7/services/IpsApiService',
              body: scene7request,
              headers: {
                "SOAPAction": "searchAssetsByMetadata",
                "Content-Type": "text/xml",
                "charset": "utf-8"
              }
            }, addImageDataWithRow);
          } else {
            return missed++;
          }
        });
      };
    })(this);
    addImageData = (function(_this) {
      return function(search, row, err, response, body) {
        console.log("addImageData");
        if (err) {
          console.log(err);
          console.log(row);
          console.log(body);
        }
        return parseString(body, function(err, result) {
          var assetName, path, results, totalRows;
          if (result['soapenv:Envelope']['soapenv:Body'][0]['soapenv:Fault']) {
            console.log(JSON.stringify(result['soapenv:Envelope']['soapenv:Body'][0]));
          }
          totalRows = result['soapenv:Envelope']['soapenv:Body'][0].searchAssetsByMetadataReturn[0].totalRows[0];
          results = result['soapenv:Envelope']['soapenv:Body'][0].searchAssetsByMetadataReturn[0].assetSummaryArray[0];
          console.log(results);
          if (results) {
            assetName = results.items[0].filename[0];
            if (assetName) {
              path = 'http://media.interface.com/is/image/InterfaceInc/' + assetName;
              imageList.push({
                'id': search,
                'url': path,
                'assetName': assetName,
                'product': row
              });
            }
          } else {
            missed++;
            missedPartNumbers.push(search);
            console.log('missed ' + search);
          }
          console.log(total, missed, imageList.length);
          if (imageList.length === total - missed) {
            console.log('ready to pull colors');
            return extractColors(imageList, saveJSON);
          }
        });
      };
    })(this);
    extractColors = (function(_this) {
      return function(images, callback) {
        var assetNames, backingCodeMap, configMap, imageInfo, imageURLs, installMap, myFirebaseRef, products, sizeMap, synced;
        Firebase = require('firebase');
        console.log('extract colors');
        backingCodeMap = {
          "2500": ["50cm x 50cm", "GlasBac® Tile"],
          "250H": ["50cm x 50cm", "GlasBac® RE Tile"],
          "250A": ["50cm x 50cm", "NexStep® Tile"],
          "250M": ["50cm x 50cm", "NexStep® Tile"],
          "250E": ["50cm x 50cm", "GlasBac® RE Tile"],
          "2000": ["1m x 1m", "GlasBac® Tile"],
          "200H": ["1m x 1m", "GlasBac® RE Tile"],
          "200A": ["1m x 1m", "NexStep® Tile"],
          "200M": ["1m x 1m", "NexStep® Tile"],
          "200E": ["1m x 1m", "GlasBac® RE Tile"],
          "AB00": ["50cm x 1m", "GlasBac® Tile"],
          "AB0H": ["50cm x 1m", "GlasBac® RE Tile"],
          "AB0A": ["50cm x 1m", "NexStep® Tile"],
          "AB0E": ["50cm x 1m", "GlasBac® RE Tile"],
          "AB0M": ["50cm x 1m", "NexStep® Tile"],
          "AK00": ["25cm x 1m", "GlasBac® Tile"],
          "AK0H": ["25cm x 1m", "GlasBac® RE Tile"],
          "AK0A": ["25cm x 1m", "NexStep® Tile"],
          "AK0M": ["25cm x 1m", "NexStep® Tile"],
          "AK0E": ["25cm x 1m", "GlasBac® RE Tile"],
          "AK0F": ["25cm x 1m", "Cushionbac Renew Tile"],
          "AB0F": ["50cm x 1m", "Cushionbac Renew Tile"],
          "200F": ["1m x 1m", "Cushionbac Renew Tile"],
          "250F": ["50cm x 50cm", "Cushionbac Renew Tile"],
          "AK01": ["25cm x 1m", "Moisturegard Plus Tile"],
          "AB01": ["50cm x 1m", "Moisturegard Plus Tile"],
          "2001": ["1m x 1m", "Moisturegard Plus Tile"],
          "2501": ["50cm x 50cm", "Moisturegard Plus Tile"],
          "AK03": ["25cm x 1m", "Super Cushion Tile"],
          "AB03": ["50cm x 1m", "Super Cushion Tile"],
          "2003": ["1m x 1m", "Super Cushion Tile"],
          "2503": ["50cm x 50cm", "Super Cushion Tile"]
        };
        sizeMap = {
          '5B': '50 cm x 50 cm',
          '5S': '50 cm x 50 cm',
          '1B': '1 m x 1 m',
          '7A': '25 cm x 1 m',
          '7B': '50 cm x 1m',
          '7C': '25 cm x 50 cm',
          '4B': 'unknown',
          '3B': 'unknown',
          '8S': 'unknown',
          '7S': '25 cm x 1 m'
        };
        configMap = {
          'Ashlar': '15',
          'Brick': '25',
          'Monolithic': '03',
          'Non-Directional': '09',
          'Quarterturn': '05',
          'Quarter-Turn': '05',
          'Herringbone': '29'
        };
        installMap = {
          '00': 'Monolithic',
          '01': 'Quarter-Turn',
          '02': 'Monolithic',
          '03': 'Monolithic',
          '04': 'Monolithic',
          '05': 'Quarter-Turn',
          '06': '',
          '07': '',
          '08': 'Ashlar',
          '09': 'Non-Directional',
          '10': 'Herringbone',
          '11': 'Ashlar',
          '12': 'Brick',
          '13': 'Brick',
          '14': 'Brick',
          '15': 'Ashlar',
          '16': 'Ashlar',
          '17': 'Monolithic',
          '18': 'Brick',
          '19': 'Ashlar',
          '20': 'Brick',
          '21': 'Brick',
          '22': 'Non-Directional',
          '23': 'Brick',
          '24': 'Brick',
          '25': 'Brick',
          '26': 'Ashlar',
          '27': 'Brick',
          '28': 'Ashlar',
          '29': 'Herringbone',
          '30': 'Brick',
          '31': 'Ashlar',
          '32': 'Brick',
          '33': 'Ashlar',
          '34': '',
          '99': 'Sample',
          'NA': ''
        };
        imageURLs = _.pluck(images, 'url');
        partNumbers = _.pluck(images, 'id');
        products = _.pluck(images, 'product');
        assetNames = _.pluck(images, 'assetName');
        total = images.length;
        imageInfo = {};
        images = [];
        synced = 0;
        myFirebaseRef = new Firebase("https://interfacespecials.firebaseio.com/products/" + revision);
        console.log("Revision: ", revision);
        return _.each(imageURLs, function(image, index) {
          var backingCode, backingName, baseTile, colorName, colorNumber, dyelotQuantities, dyelotTotal, firstThird, installCode, installLabel, lot, name, onComplete, patternNumber, product, quantity, size, sizeLabel, source, warranty;
          colorName = _s.titleize(products[index].COLOR.split(' ')[0]);
          colorNumber = products[index].THIRDITEM.split('.')[1];
          patternNumber = products[index].THIRDITEM.split('.')[2].split("M")[1];
          if (patternNumber != null) {
            patternNumber = "M" + patternNumber;
          }
          installCode = zeroFill(products[index].INSTALLMTH, 2);
          installLabel = installMap[installCode];
          if (installLabel == null) {
            installLabel = '';
          }
          firstThird = products[index].THIRDITEM.split('.')[0];
          backingName = "";
          if (firstThird != null) {
            backingCode = firstThird.substr(firstThird.length - 4);
            if (backingCodeMap[backingCode] != null) {
              backingName = backingCodeMap[backingCode][1];
            }
          }
          lot = _s.trim(products[index].LOT);
          name = _s.titleize(products[index].DESC.split('.')[0]);
          quantity = parseFloat(products[index].AVAILQTY.replace(',', ''));
          warranty = products[index].E1ITEM.slice(-1) === 'R' ? false : true;
          size = products[index].E1ITEM.substring(12, 14);
          sizeLabel = sizeMap[size];
          product = {
            'colorName': colorName,
            'colorNumber': colorNumber,
            'install': installCode,
            'installLabel': installLabel,
            'backing': backingName,
            'lot': lot,
            'name': name,
            'quantity': quantity,
            'warranty': warranty,
            'size': size,
            'sizeLabel': sizeLabel
          };
          if (patternNumber != null) {
            product.patternNumber = patternNumber;
          }
          baseTile = assetNames[index].split('_va1')[0];
          images[index] = {
            'tile': {
              'baseURL': 'http://media.interface.com/is/image/InterfaceInc/' + baseTile + "_va1"
            },
            'config': {
              'baseURL': 'http://media.interface.com/is/image/InterfaceInc/install_' + configMap[installLabel] + '_' + size + '?$tile=InterfaceInc/' + baseTile
            },
            'scene': {
              'baseURL': 'http://interfaceinc.scene7.com/ir/render/InterfaceIncRender/us_corridor?&resmode=sharp2&qlt=80,1&obj=main&res=45.72&sharp=1&src=is{InterfaceInc/install_' + configMap[installLabel] + '_' + size + '_room?$tile=InterfaceInc/' + baseTile + '}'
            }
          };
          if (imageInfo[partNumbers[index]]) {
            imageInfo[partNumbers[index]].dyelots.push({
              lot: product.lot,
              quantity: product.quantity
            });
            imageInfo[partNumbers[index]].dyelotCount = imageInfo[partNumbers[index]].dyelots.length;
            dyelotQuantities = _.pluck(imageInfo[partNumbers[index]].dyelots, "quantity");
            dyelotTotal = 0;
            _.each(dyelotQuantities, function(quant) {
              return dyelotTotal += parseFloat(quant);
            });
            imageInfo[partNumbers[index]].dyelotTotal = dyelotTotal;
          } else {
            source = JSON.stringify(products[index]);
            source = source.replace(/\"\":\"\"\,/g, '');
            source = JSON.parse(source);
            imageInfo[partNumbers[index]] = {
              'id': partNumbers[index],
              'images': images[index],
              'dyelots': [
                {
                  'lot': product.lot,
                  'quantity': product.quantity
                }
              ],
              'dyelotTotal': product.quantity,
              'dyelotCount': 1,
              'product': product,
              'source': source
            };
          }
          myFirebaseRef = new Firebase("https://interfacespecials.firebaseio.com/products/" + revision + "/imageInfo/" + partNumbers[index]);
          onComplete = function(error) {
            if (error) {
              return console.log('Synchronization failed');
            } else {
              synced++;
              if (imageURLs.length === synced) {
                console.log("synced " + synced);
                return process.exit();
              }
            }
          };
          myFirebaseRef.set(imageInfo[partNumbers[index]], onComplete);
          imagesSaved++;
          if (imagesSaved === total) {
            console.log("we have them all now");
            return callback(imageInfo);
          }
        });
      };
    })(this);
    saveJSON = (function(_this) {
      return function(imageInfo) {
        var myFirebaseRef;
        myFirebaseRef = new Firebase("https://interfacespecials.firebaseio.com/products/" + revision + "/missedPartNumbers");
        myFirebaseRef.set(missedPartNumbers);
        console.log("all done");
        return true;
      };
    })(this);
    fileService = azure.createFileService(fileShare, fileShareKey);
    return fileService.listFilesAndDirectoriesSegmented(share, directory, options, getLatestCSV);
  }).call(this);

}).call(this);
